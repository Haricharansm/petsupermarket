name: Train Goldfish YOLO (PR)

on:
  workflow_dispatch:
    inputs:
      epochs: { description: "Epochs", default: "30" }
      imgsz:  { description: "Image size", default: "640" }

permissions:
  contents: write
  pull-requests: write

jobs:
  train:
    runs-on: ubuntu-latest
    timeout-minutes: 180

    steps:
      - name: Checkout main
        uses: actions/checkout@v4
        with:
          ref: main
          lfs: true

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"

      - name: Install deps (CPU, headless)
        run: |
          python -m pip install --upgrade pip
          pip install "torch==2.3.1+cpu" "torchvision==0.18.1+cpu" "torchaudio==2.3.1+cpu" \
            --extra-index-url https://download.pytorch.org/whl/cpu
          pip install ultralytics==8.2.103 opencv-python-headless==4.8.1.78 numpy lapx==0.5.9.post1 filterpy==1.4.5
          python - <<'PY'
          import torch, cv2, ultralytics
          print("torch:", torch.__version__, "cuda?", torch.cuda.is_available())
          print("cv2:", cv2.__version__)
          print("ultralytics:", ultralytics.__version__)
          PY

      - name: Verify/Bootstrap dataset + create working YAML
        run: |
          python - <<'PY'
          import os, glob, numpy as np, cv2, textwrap

          base = "demo_goldfish_dataset"
          for d in (f"{base}/images/train", f"{base}/images/val", f"{base}/labels/train", f"{base}/labels/val"):
              os.makedirs(d, exist_ok=True)

          def count(split):
              imgs = sum(len(glob.glob(f"{base}/images/{split}/*.{e}")) for e in ("jpg","jpeg","png"))
              lbls = len(glob.glob(f"{base}/labels/{split}/*.txt"))
              return imgs, lbls

          ti, tl = count("train"); vi, vl = count("val")
          print(f"BEFORE  train: images={ti} labels={tl} | val: images={vi} labels={vl}")

          # (Optional) add tiny synthetic data if empty — omitted for brevity

          yaml_text = textwrap.dedent(f"""
          path: .
          train: {base}/images/train
          val:   {base}/images/val
          names:
            0: goldfish
            1: other_fish
          """).strip()+"\n"
          open("work_data.yaml","w").write(yaml_text)
          print("\\n--- work_data.yaml ---\\n"+yaml_text)
          PY

      - name: Train with Ultralytics API (CPU)
        env:
          WANDB_DISABLED: "true"
          EPOCHS: ${{ github.event.inputs.epochs || '30' }}
          IMGSZ:  ${{ github.event.inputs.imgsz  || '640' }}
        run: |
          python - <<'PY'
          import os
          from ultralytics import YOLO
          print("Starting training…")
          model = YOLO("yolov8n.pt")
          model.train(
              data="work_data.yaml",
              epochs=int(os.environ.get("EPOCHS","30")),
              imgsz=int(os.environ.get("IMGSZ","640")),
              device="cpu",
              batch=16,
              project="runs",
              name="train",
              exist_ok=True,
              verbose=True
          )
          PY
          echo "Runs tree:" && ls -R runs || true

      - name: Stage weights
        run: |
          mkdir -p weights
          BEST=$(ls -1t runs/detect/*/weights/best.pt | head -n1 || true)
          if [ -z "$BEST" ]; then
            echo "No best.pt found under runs/detect/*/weights/"; exit 3
          fi
          cp "$BEST" weights/goldfish_best.pt
          ls -lh weights

      - name: Create PR with weights
        uses: peter-evans/create-pull-request@v6
        with:
          branch: weights/update
          commit-message: "Add/update goldfish weights"
          title: "Add/update goldfish weights"
          body: "Automated training run (CPU) using work_data.yaml."
          add-paths: |
            weights/goldfish_best.pt
            work_data.yaml

      - name: Upload diagnostics (always)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: runs-and-weights
          path: |
            runs/**
            weights/**
            work_data.yaml
            demo_goldfish_dataset/data.yaml
