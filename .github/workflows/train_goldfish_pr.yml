name: Train Goldfish YOLO (PR)

on:
  workflow_dispatch:
    inputs:
      epochs: { description: "Epochs", default: "30" }
      imgsz:  { description: "Image size", default: "640" }

permissions:
  contents: write
  pull-requests: write

jobs:
  train:
    runs-on: ubuntu-latest
    timeout-minutes: 120

    steps:
      - name: Checkout main
        uses: actions/checkout@v4
        with:
          ref: main
          lfs: true

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"

      - name: Install pinned deps (CPU)
        run: |
          python -m pip install --upgrade pip
          pip install --no-cache-dir \
            torch==2.3.1+cpu torchvision==0.18.1+cpu torchaudio==2.3.1+cpu \
            --extra-index-url https://download.pytorch.org/whl/cpu
          pip install --no-cache-dir --upgrade \
            ultralytics==8.2.103 opencv-python-headless==4.8.1.78 \
            lapx==0.5.9.post1 filterpy==1.4.5

      - name: Set Ultralytics settings and print env
        run: |
          python - <<'PY'
          from ultralytics.utils import SETTINGS
          from pathlib import Path
          import torch, cv2, ultralytics, json

          SETTINGS.update({
              "datasets_dir": str(Path.cwd()),
              "runs_dir": str(Path.cwd() / "runs")
          })
          print("== VERSIONS ==")
          print("torch:", torch.__version__, "cuda?", torch.cuda.is_available())
          print("cv2:", cv2.__version__)
          print("ultralytics:", ultralytics.__version__)
          print("== SETTINGS ==")
          print(json.dumps(SETTINGS, indent=2))
          PY

      - name: Validate image/label pairs
        run: |
          python - <<'PY'
          from pathlib import Path
          base = Path("demo_goldfish_dataset")
          for split in ("train","val"):
              imgs = {p.stem for p in (base/"images"/split).glob("*.*")}
              lbls = {p.stem for p in (base/"labels"/split).glob("*.txt")}
              print(f"[{split}] images={len(imgs)} labels={len(lbls)}")
              miss_lbl = sorted(imgs - lbls)
              miss_img = sorted(lbls - imgs)
              if miss_lbl: print("  missing labels (first 10):", miss_lbl[:10])
              if miss_img: print("  missing images (first 10):", miss_img[:10])
              if not imgs: raise SystemExit(f"No images in images/{split}")
              if miss_lbl: raise SystemExit(f"Some labels missing for {split}")
          PY

      - name: Train with Ultralytics API (CPU)
        env:
          WANDB_DISABLED: "true"
          EPOCHS: ${{ github.event.inputs.epochs || '30' }}
          IMGSZ:  ${{ github.event.inputs.imgsz  || '640' }}
        run: |
          python - <<'PY'
          import os
          from ultralytics import YOLO
          print("Starting trainingâ€¦")
          model = YOLO("yolov8n.pt")  # auto-downloads backbone
          model.train(
              data="demo_goldfish_dataset/data.yaml",
              epochs=int(os.environ.get("EPOCHS","30")),
              imgsz=int(os.environ.get("IMGSZ","640")),
              device="cpu",
              batch=16,
              project="runs",
              name="train",
              exist_ok=True,
              verbose=True
          )
          PY
          echo "Runs tree:" && ls -R runs || true

      - name: Stage weights
        run: |
          mkdir -p weights
          BEST=$(ls -1t runs/detect/*/weights/best.pt | head -n1 || true)
          if [ -z "$BEST" ]; then
            echo "No best.pt found under runs/detect/*/weights/"; exit 3
          fi
          cp "$BEST" weights/goldfish_best.pt
          ls -lh weights

      - name: Create PR with weights
        uses: peter-evans/create-pull-request@v6
        with:
          branch: weights/update
          commit-message: "Add/update goldfish weights"
          title: "Add/update goldfish weights"
          body: "Automated training run (CPU) using demo_goldfish_dataset/data.yaml."
          add-paths: |
            weights/goldfish_best.pt
